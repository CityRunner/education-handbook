"""
Таблицы истинности 3

Продолжим работу с таблицами истинности. К сожалению, некоторые из операций
Булевой алгебры не реализованы в Python. Самые частые не стандартные операции это:
импликация, строгая дизъюнкция и эквивалентность.

Обозначим их следующим образом:

    импликация — ->;
    строгая дизъюнкция — ^;
    эквивалентность — ~.

Напишите программу, которая для введённого сложного логического высказывания строит таблицу истинности.

Формат ввода:
    Вводится логическое выражение от нескольких переменных.

Возможное содержание выражения:

    Заглавная латинская буква — переменная;
    not — отрицание;
    and — конъюнкция;
    or — дизъюнкция;
    ^ — строгая дизъюнкция;
    -> — импликация;
    ~ — эквивалентность;
    () — логические скобки.

Формат вывода:
    Выведите таблицу истинности данного выражения.

Примечание:
    Прежде, чем реализовывать новые операции, обратите внимание на их приоритет.
    Рекомендуем воспользоваться знаниями, полученными при решении задачи «Польский калькулятор».

Example 1:
    Input:
        A -> B ~ C
    Output:
        A B C F
        0 0 0 0
        0 0 1 1
        0 1 0 0
        0 1 1 1
        1 0 0 1
        1 0 1 0
        1 1 0 0
        1 1 1 1

Example 2:
    Input:
        A or C ~ not (A -> B) or C
    Output:
        A B C F
        0 0 0 1
        0 0 1 1
        0 1 0 1
        0 1 1 1
        1 0 0 1
        1 0 1 1
        1 1 0 0
        1 1 1 1
"""

from itertools import product

expression = f'(({input()}))'
replaces = {'^': '!=', '->': ')<=(', '~': '))==(('}
for key, value in replaces.items():
    expression = expression.replace(key, value)
variables = sorted(set(filter(str.isupper, expression)))
combos = product(range(2), repeat=len(variables))
table = [combo +
         (int(eval(expression, {},
                   {var: val for var, val in zip(variables, combo)})),)
         for combo in combos]
print(*variables, 'F')
for row in table:
    print(*row)
