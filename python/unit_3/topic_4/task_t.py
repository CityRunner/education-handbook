# Таблицы истинности 3

# Продолжим работу с таблицами истинности.
# К сожалению, некоторые из операций Булевой алгебры не реализованы в Python.
# Самые частые нестандартные операции это: импликация, строгая дизъюнкция
# и эквивалентность.

# Обозначим их следующим образом:
# импликация — ->;
# строгая дизъюнкция — ^;
# эквивалентность — ~.

# Напишите программу, которая для введённого сложного логического
# высказывания строит таблицу истинности.

# Формат ввода
# Вводится логическое выражение от нескольких переменных.
# Возможное содержание выражения:
# Заглавная латинская буква — переменная;
# not — отрицание;
# and — конъюнкция;
# or — дизъюнкция;
# ^ — строгая дизъюнкция;
# -> — импликация;
# ~ — эквивалентность;
# () — логические скобки.

# Формат вывода
# Выведите таблицу истинности данного выражения.

# Примечание
# Прежде, чем реализовывать новые операции, обратите внимание на их приоритет.
# Рекомендуем воспользоваться знаниями, полученными при решении задачи
# «Польский калькулятор».

from itertools import product

expression = f'(({input()}))'

replaces = {'^': '!=', '->': ')<=(', '~': '))==(('}
for key, value in replaces.items():
    expression = expression.replace(key, value)

variables = sorted(set(filter(str.isupper, expression)))
combos = product(range(2), repeat=len(variables))
table = [combo +
         (int(eval(expression, {},
                   {var: val for var, val in zip(variables, combo)})),)
         for combo in combos]

print(*variables, 'F')
for line in table:
    print(*line)
