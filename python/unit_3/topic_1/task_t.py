# Польский калькулятор — 2

# Потренируемся в ОПН дальше. Операции, которые выполняются с одним значением,
# называются унарными, с двумя — бинарными, с тремя — тернарными. Давайте
# улучшим наш калькулятор, добавив поддержку следующих операций:
# бинарные:
#     + (сложение),
#     - (вычитание),
#     * (умножение),
#     / (деление нацело; для отрицательных чисел работает по тем же правилам,
#     что и в Python);
# унарные:
#     ~ (унарный минус — меняет знак),
#     ! (факториал),
#     # (клонирование — вернуть в стек значение дважды);
# тернарные:
#     @ (возвращает в стек те же три значения, но в ином порядке: второе,
#     третье, первое).

# Формат ввода
# Вводится одна строка, содержащая разделённые пробелами целые числа и знаки
# операций. Вместе они составляют корректное выражение в обратной польской
# нотации, не содержащее деления на ноль и взятия факториала от отрицательного
# числа.

# Формат вывода
# Выводится одно целое число — результат вычисления выражения.


def factorial(number):
    F = 1
    if number > 0:
        for i in range(1, number + 1):
            F *= i
        return F
    elif number == 0:
        return 1


stack = []
unary = ('~', '!', '#')
binary = ('+', '-', '*', '/')
RPN = input().split()

for char in RPN:
    if char in unary:
        a = int(stack.pop())
        match char:
            case '~':
                stack.append(-a)
            case '!':
                stack.append(factorial(a))
            case '#':
                stack.extend([a, a])

    elif char in binary:
        b, a = int(stack.pop()), int(stack.pop())
        match char:
            case '+':
                result = a + b
            case '-':
                result = a - b
            case '*':
                result = a * b
            case '/':
                result = a // b
        stack.append(result)

    elif char == '@':
        c, b, a = int(stack.pop()), int(stack.pop()), int(stack.pop())
        stack.extend([b, c, a])

    else:
        stack.append(int(char))
else:
    print(stack.pop())
