# Хайпанём немножечко!

# Блокчейн (blockchain) переводится как «цепочка блоков». Это способ хранения
# данных, защищённый от подделки. Он лежит, например, в основе криптовалюты
# биткоин.

# Блокчейн — это действительно последовательность блоков, а в каждом блоке
# находится некоторая полезная информация. Так последовательность биткоина —
# список транзакций за определённый период времени: кто, кому, когда и сколько
# денег передал. Этот список снабжён случайным числом и некоторыми служебными
# данными, в том числе хэшем — числом, которое по определённой формуле зависит
# от остальной части блока и хэша предыдущего блока.

# Хэш должен быть меньше определённого числа. При этом формула, по которой
# вычисляется хэш, устроена так, что невозможно получить достаточно маленький
# хэш иначе, чем перебирая различные значения случайного числа. Поэтому если
# злоумышленник решит подделать блокчейн — например, вставить в его середину
# блок с записью о том, что все люди передали ему все свои деньги, — то
# столкнётся с проблемой. Ему придётся подобрать новое случайное число не
# только в поддельном блоке, но и во всех последующих, ведь хэш каждого
# следующего блока зависит от хэша предыдущего.

# Это требует невероятно больших вычислительных мощностей, поэтому блокчейн в
# целом защищён от подобных атак.

# Напишите программу, которая проводит проверку правильности хэшей в модельном
# блокчейне с простой хэш-функцией. Блок bn​ с номером n включает полезную
# информацию mn​, представленную натуральным числом, rn​ — случайное число
# от 0 до 255 и hn​ — хэш (целое число от 0 до 255). У каждого блока хэш
# вычисляется по формуле hn=37×(mn+rn+hn−1)hn​=37×(mn​+rn​+hn−1​) (по модулю
# 256), при вычислении хэша начального блока h0h0​ вместо хэша предыдущего
# блока берётся ноль. При этом каждый блок представлен одним числом
# bn=hn+rn×256+mn×2562bn​=hn​+rn​×256+mn​×2562. Также требуется, чтобы хэш
# hn​ был меньше 100.

# Формат ввода
# На первой строке вводится натуральное число N — количество блоков. Далее
# следуют N чисел bn​, каждое на отдельной строке.

# Формат вывода
# Следует вывести номер первого блока, у которого неправильный хэш (не меньше
# 100 или не совпадает с вычисленным по указанной в условии формуле), или -1,
# если все хэши в блокчейне правильные. Нумерация блоков идёт с нуля, так что
# они имеют номера от 0 до N-1.

block = {'b': [],
         'h': [],
         'r': [],
         'm': []}

for n in range(counter := abs(int(input()))):
    b = int(input())
    block['b'].append(b)
    block['h'].append(b % 256)
    block['r'].append((b // 256) % 256)
    block['m'].append(b // 256 ** 2)

wrong_hash = -1
previous_hash = 0

for n in range(counter):
    current_hash = (37 * (block['m'][n] +
                          block['r'][n] +
                          previous_hash)) % 256
    if block['h'][n] >= 100 or block['h'][n] != current_hash:
        wrong_hash = n
        break
    previous_hash = current_hash

print(wrong_hash)
